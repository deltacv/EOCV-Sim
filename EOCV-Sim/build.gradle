import java.nio.file.Paths
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'maven-publish'
}

apply from: '../build.common.gradle'

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}

ext.kotest_version = '4.4.3'

test {
    useJUnitPlatform()
}

apply from: '../test-logging.gradle'

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    implementation "org.openpnp:opencv:$opencv_version"
    implementation 'com.github.sarxos:webcam-capture:0.3.12'
    implementation "com.github.deltacv:AprilTagDesktop:$apriltag_plugin_version"

    implementation 'info.picocli:picocli:4.6.1'
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation 'io.github.classgraph:classgraph:4.8.121'

    implementation 'com.formdev:flatlaf:1.2'
    implementation 'com.formdev:flatlaf-intellij-themes:1.2'

    implementation 'net.lingala.zip4j:zip4j:2.8.0'

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-swing:$kotlinx_coroutines_version"

    testImplementation "io.kotest:kotest-runner-junit5:$kotest_version"
    testImplementation "io.kotest:kotest-assertions-core:$kotest_version"
}

task(writeBuildClassJava) {

    String date = DateTimeFormatter.ofPattern("yyyy-M-d hh:mm:ss").format(LocalDateTime.now())

    File versionFile = Paths.get(
        projectDir.absolutePath, 'src', 'main', 'java',
        'com', 'github', 'serivesmejia', 'eocvsim', 'Build.java'
    ).toFile()

    versionFile.delete()

    versionFile << "package com.github.serivesmejia.eocvsim;\n" +
        "\n" +
        "/*\n" +
        " * Autogenerated file! Do not manually edit this file, as\n" +
        " * it is regenerated any time the build task is run.\n" +
        " *\n" +
        " * Based from PhotonVision PhotonVersion generator task\n"+
        " */\n" +
        "@SuppressWarnings(\"ALL\")\n" +
        "public final class Build {\n" +
        "    public static final String versionString = \"$version\";\n" +
        "    public static final String standardVersionString = \"$standardVersion\";\n" +
        "    public static final String buildDate = \"$date\";\n" +
        "    public static final boolean isDev = ${version.contains("dev")};\n\n" +
        "    public static final String opencvVersion = \"$opencv_version\";\n" +
        "    public static final String apriltagPluginVersion = \"$apriltag_plugin_version\";\n" +
        "}"
}

build.dependsOn writeBuildClassJava
